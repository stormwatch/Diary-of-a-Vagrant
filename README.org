#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+title: Diary of a Vagrant
#+subtitle: Experiments on virtualization and self-learning Vagrant & Friends.
#+date: <2020-11-24 mar>
#+author: Ezequiel Birman
#+email: ebirman77@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.4)

I'll try to install Vagrant and most providers like VirtualBox, libvirt, VMware,
etc. Then I'll download some boxes and test which ones succed or fail when
brought up. My current computer runs Fedora 32, so many of the steps I'll detail
will apply to similar distributions without changes.

* Hardware requirements
:PROPERTIES:
:CREATED:  [2020-12-04 vie 09:25]
:END:
** DONE Enable virtualization features in the BIOS setup
** DONE Check if your system supports virtualization
:PROPERTIES:
:CREATED:  [2020-12-04 vie 10:02]
:END:
If you have =libvirt-client= or =lscpu= already installed, you can run
~virt-host-validate~ or ~LANG= lscpu | grep Virtualization~ respectively. Otherwise run
#+begin_src
egrep "svm|vmx" /proc/cpuinfo
#+end_src

* Virtual Machines providers
:PROPERTIES:
:CREATED:  [2020-12-18 vie 00:05]
:END:
Due to time constrainsts, I won't be able to make an exhaustive test of the
different products right away. Some of these technologies are also called
hypervisors which is a funny word that appeared in OS research papers around the
[[https://softwareengineering.stackexchange.com/questions/196405/how-did-the-term-hypervisor-come-into-use][sixties and seventies]] and denotes —at least in its origins— a supervisor of
supervisors.

** DONE Install VirtualBox
:PROPERTIES:
:CREATED:  [2020-12-04 vie 10:20]
:END:
I enabled RPM Fusion and followed the instructions in RPM Fusion's [[https://rpmfusion.org/Howto/VirtualBox][VirtualBox
Howto]]. =vboxdrv= might fail to load because the module isn't signed. I can
either disable the secure boot option in the BIOS or [[https://rpmfusion.org/Howto/VirtualBox#Sign_kernel_modules_to_work_with_secure_boot][sign the kernel modules]].
See also this [[https://bugzilla.redhat.com/show_bug.cgi?id=1454824][bug report]].

According to [[https://www.vagrantup.com/docs/installation][Vagrant's Installation instructions]] VirtualBox might also fail if
it is run alongside =kvm=. They suggest blacklisting the offending module.

*** DONE Install the guest additions
:PROPERTIES:
:CREATED:  [2020-12-06 dom 05:00]
:END:
This package contains the VirtualBox Guest Additions

#+begin_quote
which support better integration of VirtualBox guests with the Host, including
file sharing, clipboard sharing and Seamless mode,
#+end_quote

Whatever that means.

** DONE Install libvirt, qemu-kvm & utilities
:PROPERTIES:
:CREATED:  [2020-12-04 vie 09:59]
:END:
#+begin_src shell :async :results none
  sudo dnf -yq group install --with-optional virtualization
#+end_src

*** DONE Switch to [[https://libvirt.org/daemons.html#switching-to-modular-daemons][modular dæmons]]
CLOSED: [2020-12-13 dom 04:01]
:PROPERTIES:
:CREATED:  [2020-12-12 sáb 22:09]
:END:

libvirtd is migrating from  [[https://libvirt.org/daemons.html#monolithic-vs-modular-daemons][a monolithic to a modular dæmon architecture]]
#+begin_quote
The libvirt daemons, whether monolithic or modular, can often operate in two
modes

- System mode :: the daemon is running as the root user account, enabling access
  to its full range of functionality. A read-write connection to daemons in
  system mode typically implies privileges equivalent to having a root shell.
  Suitable authentication mechanisms must be enabled to secure it against
  untrustworthy clients/users.
- Session mode :: the daemon is running as any non-root user account, providing
  access to a more restricted range of functionality. Only client apps/users
  running under the same UID are permitted to connect, thus a connection does
  not imply any elevation of privileges.
#+end_quote

**** DONE Stop the current monolithic daemon and its socket units
CLOSED: [2020-12-12 sáb 23:22]
:PROPERTIES:
:CREATED:  [2020-12-12 sáb 23:17]
:END:
#+begin_src sh :async
  systemctl disable --now libvirtd.service
  systemctl disable --now libvirtd{,-ro,-admin,-tcp,-tls}.socket
#+end_src

For stronger protection it is valid to use =mask= instead of =disable= too.

**** DONE Enable the new daemons for the particular virtualizationd driver desired, and any of the secondary drivers to accompany it.
CLOSED: [2020-12-18 vie 00:10]
:PROPERTIES:
:CREATED:  [2020-12-12 sáb 23:29]
:END:
The following example enables the =qemu= and =virtbvox= drivers and all the secondary drivers:
#+begin_src sh :async :results none
  for drv in qemu virtvbox interface network nodedev nwfilter secret storage
  do
      systemctl unmask virt${drv}d.service
      systemctl unmask virt${drv}d{,-ro,-admin}.socket
      systemctl enable virt${drv}d.service
      systemctl enable virt${drv}d{,-ro,-admin}.socket
  done
#+end_src

Start the sockets for the same set of daemons. There is no need to start the
services as they will get started when the first socket connection is
established.
# why does the document ommit =virtinterface.socket=?
#+begin_src sh :async :results none
  for drv in qemu virtbvox network nodedev nwfilter secret storage
  do
      systemctl start virt${drv}d{,-ro,-admin}.socket
  done
#+end_src

If connections from remote hosts need to be supported the proxy daemon must be
enabled and started
#+begin_src sh :async :results none
  systemctl unmask virtproxyd.service
  systemctl unmask virtproxyd{,-ro,-admin}.socket
  systemctl enable virtproxyd.service
  systemctl enable virtproxyd{,-ro,-admin}.socket
  systemctl start virtproxyd{,-ro,-admin}.socket
#+end_src

The UNIX sockets allow for remote access using SSH tunneling. If libvirtd had
TCP or TLS sockets configured, those should be started too
#+begin_src sh :async :results none
  systemctl unmask virtproxyd-tls.socket
  systemctl enable virtproxyd-tls.socket
  systemctl start virtproxyd-tls.socket
#+end_src

** TODO Install VMware
:PROPERTIES:
:CREATED:  [2020-12-18 vie 00:12]
:END:
Vagrant supports many providers. They are not listed in [[https://www.vagrantup.com/docs/providers/default][the documentation]] but in the [[https://app.vagrantup.com/boxes/search][box search page]]. The complete list is:

- aws
- cloudstack
- digitalocean
- docker
- google
- hyperv
- libvirt
- lxc
- openstack
- parallels
- qemu
- rackspace
- softlayer
- veertu
- virtualbox
- vmware
- vmware_desktop
- vmware_fusion
- vmware_ovf
- wmware_wotkstation
- vsphere
- xenserver
  
* DONE Install Vagrant
:PROPERTIES:
:CREATED:  [2020-12-04 vie 19:19]
:END:
Vagrants abstracts different virtual machine providers under a common API and
configuration layer. VirtualBox, Hyper-V, and Docker are supported right out of
the box, for the rest I have to install plugins.

Here is an overview of the differnet installation methods that I tried out:
- Fedora's package (recommended) :: Easiest installation. Lagging somewhat
  behind the upstream version. Won't work with [[https://app.vagrantup.com/peru/boxes/windows-server-2019-standard-x64-eval][Windows guests]]. Moreover,
  [[https://github.com/asdf-vm/asdf-ruby][asdf-ruby]] installed runtimes will conflict with Vagrant. The solution is to
  type ~asdf local ruby system~ inside the directory with the Vagrantfile,
  otherwise Vagrant will complain about not being able to find some ruby gems
  and not being able to require =nokogiri=. It has one inconvinience though in
  that Emacs won't be able to find the binary for rubocop (this may affect
  solargraph too). I thought ~asdf local ruby system 2.7.2~ would solve the
  issuse but it didn't.[fn:1]
- [[https://github.com/Banno/asdf-hashicorp][asdf-hashicorp]] :: Easy installation. In fish shell just ~asdf plugin add
  vagrant; then asdf install vagrant latest; then asdf global vagrant x.y.z~ .
  As of [2020-12-04 vie]— ~vagrant plugin install vagrant-libvirt~ will fail so
  =vagrant-libvirt= kindly provides an alternative [[https://github.com/vagrant-libvirt/vagrant-libvirt#using-docker-based-installation][Docker based installation]].
- Download the [[https://www.vagrantup.com/downloads][official Vagrant package]] :: Beware that the [[https://bugzilla.redhat.com/show_bug.cgi?id=1833024][Upstream Vagrant
  isn't compatible with the Fedora version of OpenSSL]]. Ruby in Vagrant is built
  against a bundled version of OpenSSL while during vagrant-libvirt
  installation, the system version of OpenSSL is used and later they clash. The
  workaround is to download OpenSSL and Kerberos 5 source RPM libraries, rebuild
  them and manually copying the shared libraries to
  =/opt/vagrant/embedded/lib64=. Then I can run ~vagrant plugin install
  vagrant-libvirt~ but make sure to remove the =~/.vagrant.d= remnant from
  previous attempts, beforehand. I found the workarounds and relevant
  information for Fedora, RHEL 8, and CentOS 8 in [[https://github.com/vagrant-libvirt/vagrant-libvirt#installation][vagrant-libvirt installation
  instructions]] and in this [[https://github.com/hashicorp/vagrant/issues/11020#issuecomment-647120209][Vagrant issue]]. Similar problems also affect other
  software like Matlab and Scilab. I quote the following comment from [[https://bugzilla.redhat.com/show_bug.cgi?id=1829790#c10][another
  bug report]]:
  #+begin_quote
  …this means those products are using most probably outdated libraries w/o
  getting CVE bugfixes when the system gets them. I would open a bug report
  upstream to stop doing this stupid library interposing on all systems and do
  it only where the proper library version is missing (arguably they do this to
  handle RHEL/CentOS 6 which are stuck on openssl 1.0.2). That said at least
  Matlab is a proprietary product so… good luck, any number of things can break
  when they play fast and loose with critical libraries like openssl.
  #+end_quote
- [[https://www.vagrantup.com/docs/installation/source][Install from source]] :: clone the GitHub repo and ~bundle install~. Then try to
  use the Docker image for =vagrant-libvirt=.
- Use Windows :: I followed [[https://www.vagrantup.com/docs/other/wsl.html][Vagrant and Windows Subsystem for Linux]]. Looks
    promising but I remember having issues with WSL 2. The tests I made with the
    native version and VirtualBox run fine.

   
** Vagarnt providers 
:PROPERTIES:
:CREATED:  [2020-12-18 vie 01:00]
:END:
The complete list of providers is available in the [[https://app.vagrantup.com/boxes/search][Vagrant's box registry web page]]:
- aws :: 


** Plugins
:PROPERTIES:
:CREATED:  [2020-12-18 vie 00:51]
:END:


| plugin      | Fedora | asdf-hashicorp | official package | source |
|-------------+--------+----------------+------------------+--------|
| aws         |        | 😄             |                  |        |
| cachier     |        | 😄             |                  |        |
| hostmanager |        | 😄             |                  |        |
| libvirt     |        | 💔             |                  |        |
| reload      |        | 😄             |                  |        |
| vbguest     |        | 😄             |                  |        |

https://github.com/mitchellh/vagrant-aws


* TODO Install VMware
:PROPERTIES:
:CREATED:  [2020-12-04 vie 19:42]
:END:

* Interesting Vagrant boxes
:PROPERTIES:
:CREATED:  [2020-12-06 dom 04:00]
:END:

** [[https://app.vagrantup.com/ailispaw/boxes/barge][Ailispaw's Barge]]                                      :VirtualBox:veertu:
:PROPERTIES:
:CREATED:  [2020-12-06 dom 13:37]
:User: [[https://app.vagrantup.com/ailispaw/][ailispaw]]
:Homepage: https://github.com/bargees/barge-os
:END:
a lightweight Linux distribution built with [[http://buildroot.uclibc.org/][Buildroot]] specifically to run Docker
containers.

*** Features
:PROPERTIES:
:CREATED:  [2020-12-06 dom 14:19]
:END:
- Built with Buildroot 2019.05 with Linux kernel v4.14.125 and glibc.
- Docker v1.10.3 (~ latest version)
- Support NFS synced folder
- Support VirtualBox Shared Folder (VirtualBox only) with VirtualBox Guest Addition v6.0.4
- Support Docker provisioner
- Disable TLS of Docker for simplicity
- Expose and forward the official IANA registered Docker port 2375
- [[https://github.com/Yelp/dumb-init][dumb-init]] binary is built-in /usr/bin
- [[https://github.com/bargees/barge-pkg][pkg]] command is built-in. You can install individual packages from Buildroot.
- Enable to switch between Docker versions
- 40 GB persistent disk
- 13.8 MB

** [[https://app.vagrantup.com/bento/][Bento]]                                         :VirtualBox:VMware_desktop:
:PROPERTIES:
:CREATED:  [2020-12-06 dom 04:16]
:END:
Boxes built using templates from the Chef's [[http://chef.github.io/bento/][Bento]] project.
Currently they list:
- FreeBSD
- Debian
- Oracle
- Scientific
- openSUSE
- CentOS
- Fedora
- Ubuntu
- Amazon Linux
** [[https://app.vagrantup.com/fedora/][Fedora]]                                               :VirtualBox:libvirt:
:PROPERTIES:
:CREATED:  [2020-12-06 dom 04:01]
:END:
Official images mirrored in [[https://alt.fedoraproject.org/cloud/][Fedora cloud base images for Vagrant]]
** [[https://app.vagrantup.com/centos][CentOS]]                                               :VirtualBox:libvirt:
:PROPERTIES:
:CREATED:  [2020-12-06 dom 04:02]
:END:
Official images for [[https://www.centos.org/][CentOS]].Besides the main images, they offer a proof of
concept [[https://app.vagrantup.com/centos/boxes/atomic-host-aws][atomic host box]] that uses AWS backend.
** [[https://app.vagrantup.com/freebsd/][FreeBSD]]                                       :VirtualBox:VMware_desktop:
:PROPERTIES:
:CREATED:  [2020-12-06 dom 04:03]
:END:
** [[https://www.alpinelinux.org/][alpine Linux]]                                         :VirtualBox:libvirt:
:PROPERTIES:
:CREATED:  [2020-12-06 dom 14:37]
:END:
Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.
** [[https://app.vagrantup.com/roboxes/][Roboxes]]      :VirtualBox:libvirt:VMware_desktop:docker:hyperv:parallels:
:PROPERTIES:
:CREATED:  [2020-12-06 dom 14:45]
:END:
Base Boxes Built by Benevolent Robotic Dogs. https://roboxes.org/

Mirrored by [[https://app.vagrantup.com/generic/][generic]]. Provides:
- Oracle
- Fedora
- Ubuntu
- Devuan
- Alpine
- netBSD
- openSUSE
- Gentoo
- HardenedBSD
- RHEL
- DragonFlyBSD
  
* TODO Testing Vagrant providers and boxes
:PROPERTIES:
:CREATED:  [2020-12-02 mié 18:56]
:END:
Current status after running ~vagrant up~
|                             | VirtualBox | libvirt (qemu-kvm) | VMware  |
|-----------------------------+------------+--------------------+---------|
| [[https://app.vagrantup.com/ailispaw/boxes/barge][ailispaw/barge]]              | success    | N/A                | N/A     |
| [[https://app.vagrantup.com/centos/boxes/8][centos/8]]                    | pending    | success            | N/A     |
| [[https://app.vagrantup.com/freebsd/boxes/FreeBSD-12.2-STABLE][freebsd/FreeBSD-12.2-STABLE]] | pending    | N/A                | pending |
| [[https://app.vagrantup.com/bento/boxes/freebsd-12.2][bento/freebsd-12.2]]          | pending    | N/A                | pending |
| [[https://app.vagrantup.com/alpine-linux/boxes/alpine-x86_64][alpine-linux/alpine-x86_64]]  | pending    | pending            | N/A     |
| [[https://app.vagrantup.com/fedora/boxes/33-cloud-base][fedora/33-cloud-base]]        | pending    | success            | N/A     |

* Further reading
:PROPERTIES:
:CREATED:  [2020-12-05 sáb 22:17]
:END:
- [[https://docs.fedoraproject.org/en-US/quick-docs/getting-started-with-virtualization/index.html][Getting started with virtualization]] :: is an excellent overview to using the
  virtualization capabilities in Fedora.
- The [[https://fedoraproject.org/wiki/Vagrant][Vagrant page]] :: in the Fedora Wiki provides a useful Vagrantfile example
  to use the official [[https://alt.fedoraproject.org/cloud/][Fedora cloud base images for Vagrant]].
- [[https://fedoraproject.org/wiki/How_to_debug_Virtualization_problems][How to debug Virtualization problems]] :: in the Fedora Wiki.
- [[https://fedoramagazine.org/vagrant-qemukvm-fedora-devops-sysadmin/][Installing and running Vagrant using qemu-kvm]] :: Fedora Magazine, [2020-09-21].
- [[https://fedoramagazine.org/vagrant-beyond-basics/][Vagrant beyond the basics]] :: Fedora Magazine, [2020-12-02].
- [[https://fedoramagazine.org/full-virtualization-system-on-fedora-workstation-30/][How to run virtual machines with virt-manager]] :: Fedora Magazine,  [2019-07-22] .
- [[https://fedoramagazine.org/using-ansible-provision-vagrant-boxes/][Using Ansible to Provision Vagrant Boxes]] :: Fedora Magazine, [2016-09-14].
- [[https://fedoramagazine.org/install-fedora-virtualbox-guest/][How to Install Fedora as a VirtualBox guest]] :: Fedora Magazine, [2017-03-20].
- [[https://fedoramagazine.org/getting-started-with-fedora-coreos/][Getting started with Fedora CoreOS]] :: Fedora Magazine, [2020-11-27].
- [[https://www.ovirt.org/][oVirt]] :: is an open-source distributed virtualization solution, designed to
  manage your entire enterprise infrastructure. oVirt uses the trusted KVM
  hypervisor and is built upon several other community projects, including
  libvirt, Gluster, PatternFly, and Ansible.

* Footnotes

[fn:1] For the time being I added the following to my init file:
#+begin_src emacs-lisp
   (use-package rubocop
    :defer t
    :custom (rubocop-check-command
             (concat
              (substring (shell-command-to-string "asdf which rubocop") 0 -1)
              " --format emacs")))
#+end_src

